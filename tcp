//client.c
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h> // for close()

int main() {
    char buf[100];
    int k;
    int sock_desc;
    struct sockaddr_in client;

    sock_desc = socket(AF_INET, SOCK_STREAM, 0);
    if (sock_desc == -1) {
        printf("Error in socket creation!");
        return 1; // Exit with error code
    }

    memset(&client, 0, sizeof(client)); // Initialize client structure
    client.sin_family = AF_INET;
    client.sin_addr.s_addr = INADDR_ANY;
    client.sin_port = htons(3003); // Convert port to network byte order

    k = connect(sock_desc, (struct sockaddr *)&client, sizeof(client));
    if (k == -1) {
        printf("Error in connecting to server!");
        close(sock_desc); // Close socket before returning
        return 1; // Exit with error code
    }

    printf("\nEnter data to be sent: ");
    fgets(buf, sizeof(buf), stdin);

    k = send(sock_desc, buf, strlen(buf), 0);
    if (k == -1) {
        printf("Error in sending!");
        close(sock_desc); // Close socket before returning
        return 1; // Exit with error code
    }

    close(sock_desc); // Close socket
    return 0;
}
//server.c
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h> // for close()
#include <sys/socket.h>

int main() {
    char buf[100];
    int k;
    socklen_t len;
    int sock_desc, temp_sock_desc;
    struct sockaddr_in server, client;

    sock_desc = socket(AF_INET, SOCK_STREAM, 0);
    if (sock_desc == -1) {
        printf("Error in socket creation");
        return 1; // Exit with error code
    }

    memset(&server, 0, sizeof(server)); // Initialize server structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(3003); // Convert port to network byte order

    if (bind(sock_desc, (struct sockaddr *)&server, sizeof(server)) == -1) {
        printf("Error in binding");
        close(sock_desc); // Close socket before returning
        return 1; // Exit with error code
    }

    if (listen(sock_desc, 5) == -1) {
        printf("Error in listening");
        close(sock_desc); // Close socket before returning
        return 1; // Exit with error code
    }

    len = sizeof(client);
    temp_sock_desc = accept(sock_desc, (struct sockaddr *)&client, &len);
    if (temp_sock_desc == -1) {
        printf("Error in temporary socket creation");
        close(sock_desc); // Close socket before returning
        return 1; // Exit with error code
    }

    k = recv(temp_sock_desc, buf, sizeof(buf), 0);
    if (k == -1) {
        printf("Error in receiving");
        close(temp_sock_desc); // Close temporary socket before returning
        close(sock_desc); // Close socket before returning
        return 1; // Exit with error code
    }

    printf("Message received from client: %s", buf);

    close(temp_sock_desc); // Close temporary socket
    close(sock_desc); // Close socket
    return 0;
}



