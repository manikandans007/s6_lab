//client.c
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{
 struct sockaddr_in server, client;
 if (argc != 3)
 printf("Input format not correct!\n");
 int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
 if (sockfd == -1)
 printf("Error in socket creation!\n");
 server.sin_family = AF_INET;
 server.sin_addr.s_addr = INADDR_ANY;
 server.sin_port = htons(atoi(argv[2]));
 char buffer[100];
 printf("Enter a message to sent to server: ");
 fgets(buffer, 100, stdin);
 if (sendto(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&server, 
sizeof(server)) < 0)
 printf("Error in sending!\n");
 return 0;
}


//server.c
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h> // for close()

int main(int argc, char *argv[]) {
    struct sockaddr_in server, client;

    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        return 1; // Exit with error code
    }

    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd == -1) {
        perror("Error in socket creation");
        return 1; // Exit with error code
    }

    memset(&server, 0, sizeof(server)); // Initialize server structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(atoi(argv[1]));

    if (bind(sockfd, (struct sockaddr *)&server, sizeof(server)) < 0) {
        perror("Error in bind");
        close(sockfd); // Close socket before returning
        return 1; // Exit with error code
    }

    char buffer[100];
    socklen_t client_len = sizeof(client);

    printf("Server waiting...\n");

    ssize_t recv_len = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&client, &client_len);
    if (recv_len < 0) {
        perror("Error in receiving");
        close(sockfd); // Close socket before returning
        return 1; // Exit with error code
    }

    printf("Got a datagram: %s", buffer);

    close(sockfd); // Close socket
    return 0;
}


